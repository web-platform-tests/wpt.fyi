// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/web-platform-tests/wpt.fyi/webapp (interfaces: GithubOAuth)

// Package mock_webapp is a generated GoMock package.
package mock_webapp

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v28/github"
	shared "github.com/web-platform-tests/wpt.fyi/shared"
	oauth2 "golang.org/x/oauth2"
	reflect "reflect"
)

// MockGithubOAuth is a mock of GithubOAuth interface
type MockGithubOAuth struct {
	ctrl     *gomock.Controller
	recorder *MockGithubOAuthMockRecorder
}

// MockGithubOAuthMockRecorder is the mock recorder for MockGithubOAuth
type MockGithubOAuthMockRecorder struct {
	mock *MockGithubOAuth
}

// NewMockGithubOAuth creates a new mock instance
func NewMockGithubOAuth(ctrl *gomock.Controller) *MockGithubOAuth {
	mock := &MockGithubOAuth{ctrl: ctrl}
	mock.recorder = &MockGithubOAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGithubOAuth) EXPECT() *MockGithubOAuthMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockGithubOAuth) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockGithubOAuthMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockGithubOAuth)(nil).Context))
}

// Datastore mocks base method
func (m *MockGithubOAuth) Datastore() shared.Datastore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Datastore")
	ret0, _ := ret[0].(shared.Datastore)
	return ret0
}

// Datastore indicates an expected call of Datastore
func (mr *MockGithubOAuthMockRecorder) Datastore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Datastore", reflect.TypeOf((*MockGithubOAuth)(nil).Datastore))
}

// GetAccessToken mocks base method
func (m *MockGithubOAuth) GetAccessToken() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessToken")
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetAccessToken indicates an expected call of GetAccessToken
func (mr *MockGithubOAuthMockRecorder) GetAccessToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessToken", reflect.TypeOf((*MockGithubOAuth)(nil).GetAccessToken))
}

// GetAuthCodeURL mocks base method
func (m *MockGithubOAuth) GetAuthCodeURL(arg0 string, arg1 ...oauth2.AuthCodeOption) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuthCodeURL", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAuthCodeURL indicates an expected call of GetAuthCodeURL
func (mr *MockGithubOAuthMockRecorder) GetAuthCodeURL(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthCodeURL", reflect.TypeOf((*MockGithubOAuth)(nil).GetAuthCodeURL), varargs...)
}

// GetGithubUser mocks base method
func (m *MockGithubOAuth) GetGithubUser(arg0 *github.Client) (*github.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGithubUser", arg0)
	ret0, _ := ret[0].(*github.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGithubUser indicates an expected call of GetGithubUser
func (mr *MockGithubOAuthMockRecorder) GetGithubUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGithubUser", reflect.TypeOf((*MockGithubOAuth)(nil).GetGithubUser), arg0)
}

// GetNewClient mocks base method
func (m *MockGithubOAuth) GetNewClient(arg0 string) (*github.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewClient", arg0)
	ret0, _ := ret[0].(*github.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewClient indicates an expected call of GetNewClient
func (mr *MockGithubOAuthMockRecorder) GetNewClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewClient", reflect.TypeOf((*MockGithubOAuth)(nil).GetNewClient), arg0)
}

// SetRedirectURL mocks base method
func (m *MockGithubOAuth) SetRedirectURL(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRedirectURL", arg0)
}

// SetRedirectURL indicates an expected call of SetRedirectURL
func (mr *MockGithubOAuthMockRecorder) SetRedirectURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRedirectURL", reflect.TypeOf((*MockGithubOAuth)(nil).SetRedirectURL), arg0)
}
