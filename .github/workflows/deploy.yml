name: Deploy
on:
  push:
    branches:
      - main
      - github-actions # TODO: remove
jobs:
  deploy-staging:
    name: Deploy staging.wpt.fyi
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE: webplatformtests/wpt.fyi:latest
      # TODO(kyleju): fix this
      DOCKER_INSTANCE: wptd-dev-0000
    steps:
      - uses: actions/checkout@v2

      - name: secrets
        run: echo "$GCLOUD_KEY_FILE_JSON" > client-secret.json
        env:
         GCLOUD_KEY_FILE_JSON: ${{ secrets.GCLOUD_KEY_FILE_JSON }}

      - name: pre-installation
        run: |
          docker pull "${DOCKER_IMAGE}"
          bash ./util/docker-dev/run.sh -d -q

      - name: installation
        run: docker exec -t "${DOCKER_INSTANCE}" make go_build;

      - name: build
        run: bash util/travis-deploy-staging.sh -f webapp/web/app.staging.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# remaining travis.yml content to convert:
#
# # Stages run in order. Jobs in the same stage run in parallel.
# # In jobs.include, each job will inherit the stage of the previous job and the
# # default stage is "test".
# stages:
#   - name: deploy PR
#     if: type = pull_request
#   - name: deploy main
#     if: (type = push) AND (branch = main)
#   - name: clean up versions
#     if: (type = push) AND (branch = main)
#
# jobs:
#   allow_failures:
#     - env:
#         - MAKE_TEST_TARGET=puppeteer_chrome_test
#
#   include:
#     # These are the default "test" stage, which will run at the *end*.
#     # All the other tests run on GitHub Actions. We haven't migrated Puppeteer
#     # tests because they need to wait for deployments.
#     - env:
#         - MAKE_TEST_TARGET=puppeteer_chrome_test
#     - stage: deploy PR
#       env:
#       - DEPLOY_PR_STAGING_TARGET=webapp/web/app.staging.yaml
#     - env:
#       - DEPLOY_PR_STAGING_TARGET=results-processor
#     - env:
#       - DEPLOY_PR_STAGING_TARGET=api/query/cache/service/app.staging.yaml
#
#     - stage: deploy main
#       env:
#       - DEPLOY_STAGING_TARGET=webapp/web/app.staging.yaml
#       - MAKE_TEST_TARGET=go_large_test # Run integration tests after webapp deployment.
#       - MAKE_TEST_FLAGS="STAGING=true"
#     - env:
#       - DEPLOY_STAGING_TARGET=results-processor
#     - env:
#       - DEPLOY_STAGING_TARGET=api/query/cache/service
#
#     # Run this job in a different stage to prevent racing with deployment.
#     - stage: clean up versions
#       env:
#       - MAKE_TEST_TARGET=cleanup_staging_versions
#
# before_install: |
#   export DOCKER_IMAGE="webplatformtests/wpt.fyi:latest"
#   export DOCKER_INSTANCE="wptd-dev-${RANDOM}"
#   # Decrypt client-secret.json for Appengine.
#   openssl aes-256-cbc -K $encrypted_2fd045226a67_key -iv $encrypted_2fd045226a67_iv -in client-secret.json.enc -out client-secret.json -d
#
#   travis_retry docker pull "${DOCKER_IMAGE}"
#   travis_retry bash ./util/docker-dev/run.sh -d -q
#
# install: |
#   # Retry `go get` to avoid intermittent network issues.
#   travis_retry docker exec -t "${DOCKER_INSTANCE}" make go_build;
#
# script:
#   - |
#     # Deploy PR to staging environment (only when Travis secrets are available).
#     # Note: Done here (in 'script', not 'deploy') because we need deploy to happen before staging webdriver test.
#     set -e
#     if [[ -n "${DEPLOY_STAGING_TARGET}" ]]; then
#       bash util/travis-deploy-staging.sh -f "${DEPLOY_STAGING_TARGET}";
#     elif [[ -n "${DEPLOY_PR_STAGING_TARGET}" ]]; then
#       bash util/travis-deploy-staging.sh "${DEPLOY_PR_STAGING_TARGET}";
#     else
#       echo "Not on main or a PR. Skipping deployment.";
#     fi
#   - |
#     # Run tests
#     if [[ -n "${MAKE_TEST_TARGET}" ]]; then
#       docker exec -t "${DOCKER_INSTANCE}" make "${MAKE_TEST_TARGET}" ${MAKE_TEST_FLAGS};
#     fi
