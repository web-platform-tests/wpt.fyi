# Copyright 2017 The WPT Dashboard Project. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

dist: xenial

notifications:
  email:
    on_success: never # default: change
    on_failure: always # default: always

branches:
  only:
    - master

services:
  - docker

language: python
python: "3.6"
cache:
  directories:
    - webapp/node_modules
    - results-processor/.tox

# ${GITHUB_TOKEN}
env:
  global:
    - secure: "wQIAV/OJdWTKkqnnL6pKQC8R0nChV6yRT2MK49qZV0ulA/0a6V9G+oIlbixI04CgLbsjExGDUY6ZiSYgd8rPixuWNIP1sG//AwUfNggpyQF0rFqPRrGOKJD+TkvGgTu8c8nSK0Rxlw3d+Yy7wXKdtzsP/4euub7eYLHhYlDXhw6ANE9jmtwyTCyM+MdHvnEsvDEXkXExvpurGSsXxPwG8CCLKLRp1O2BJwh9PPn+likU9AT6HFedhoW+Jv9YFnrqCtgCNzucQTTILDoLLvz4+Kk7FYmLriWXPT+QWL87tYFGI0gZev3+XdpTLJWjh1XUw35pYZzZsgRkl7y7uVUPFsYWoUXLoX9gv6Qp1sR+2hN9Z/CNSMNwrTVIAyE+db9q+wWpesy7L72bmaVri2PFqhz+uvNQ3hM2Lu4e/mjj4E8uVE9nTiWtBwnb7376nDemeHxeV3ADbEZceTHuIKxtyP1A6gXCxswGGzPJLrmCjq0XSPgskcpWOR4xRSKYior0Bhd+ULPKO7GzX2AMKxMpkELUf8XjhVpJXZjdemqV+ppV69JBmRQLDWsZQgmT0y/aclgSNVk3lVr/c2STHpmdhAWlgkjnaxqofLt5JIh1YHkJYaDxWbLyuuMTcpPKCdbJGAg4/PvCMo6bwurVBCS2+mqTxD6SfYXm7eFwhd7aJDA="

matrix:
  include:
    - env:
        - MAKE_TEST_TARGET=python_test
    - env:
        - MAKE_TEST_TARGET=web_components_test
    - env:
        - MAKE_TEST_TARGET=go_firefox_test
    - env:
        - MAKE_TEST_TARGET=go_chrome_test
    - env:
        - MAKE_TEST_TARGET=puppeteer_chrome_test
    - env:
        - MAKE_TEST_TARGET=lint
    - env:
        - MAKE_TEST_TARGET=go_test

    # pr branch deployments
    - if: type = pull_request
      env:
      - DEPLOY_PR_STAGING_TARGET=webapp
    - if: type = pull_request
      env:
      - DEPLOY_PR_STAGING_TARGET=results-processor
    - if: type = pull_request
      env:
      - DEPLOY_PR_STAGING_TARGET=revisions/service
    - if: type = pull_request
      env:
      - DEPLOY_PR_STAGING_TARGET=api/query/cache/service/app.staging.yaml

    # master branch deployments
    - if: (type = push) AND (branch = master)
      env:
      - DEPLOY_STAGING_TARGET=webapp
      - MAKE_TEST_TARGET=go_large_test # Run integration tests after webapp deployment.
      - MAKE_TEST_FLAGS="STAGING=true"
    - if: (type = push) AND (branch = master)
      env:
      - DEPLOY_STAGING_TARGET=results-processor
    - if: (type = push) AND (branch = master)
      env:
      - DEPLOY_STAGING_TARGET=revisions/service
    - if: (type = push) AND (branch = master)
      env:
      - DEPLOY_STAGING_TARGET=api/query/cache/service
    - if: (type = push) AND (branch = master)
      env:
      - MAKE_TEST_TARGET=cleanup_staging_versions

before_install: |
  export DOCKER_IMAGE=wptd-dev
  export DOCKER_INSTANCE=wptd-dev-${RANDOM}
  # Decrypt client-secret.json for Appengine.
  openssl aes-256-cbc -K $encrypted_c8659b25fe66_key -iv $encrypted_c8659b25fe66_iv -in client-secret.json.enc -out client-secret.json -d

  travis_retry docker build -t "${DOCKER_IMAGE}" .
  travis_retry bash ./util/docker-dev/run.sh -d -q

install: |
  # Retry `go get` to avoid intermittent network issues.
  if [[ "${MAKE_TEST_TARGET}" == "python_test" || "DEPLOY_PR_STAGING_TARGET" == "results-processor" ]]; then
    travis_retry pip install tox;
  else
    travis_retry docker exec -t "${DOCKER_INSTANCE}" make go_build;
  fi

script:
  - |
    # Deploy PR to staging environment (only when Travis secrets are available).
    # Note: Done here (in 'script', not 'deploy') because we need deploy to happen before staging webdriver test.
    set -e
    if [[ -n "${DEPLOY_STAGING_TARGET}" ]]; then
      bash util/travis-deploy-staging.sh -f "${DEPLOY_STAGING_TARGET}";
    elif [[ -n "${DEPLOY_PR_STAGING_TARGET}" ]]; then
      bash util/travis-deploy-staging.sh "${DEPLOY_PR_STAGING_TARGET}";
    else
      echo "Not on master or a PR. Skipping deployment.";
    fi
  - |
    # Run tests
    if [[ -n "${MAKE_TEST_TARGET}" && "${MAKE_TEST_TARGET}" != "python_test" ]]; then
      docker exec -t "${DOCKER_INSTANCE}" make "${MAKE_TEST_TARGET}" ${MAKE_TEST_FLAGS};
    fi
  - |
    # Run Python tests
    if [[ "${MAKE_TEST_TARGET}" == "python_test" ]]; then
      cd results-processor; tox;
    fi
