// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/web-platform-tests/wpt.fyi/revisions/git (interfaces: Repository,Git)

// Package git is a generated GoMock package.
package git

import (
	gomock "github.com/golang/mock/gomock"
	go_billy_v4 "gopkg.in/src-d/go-billy.v4"
	go_git_v4 "gopkg.in/src-d/go-git.v4"
	plumbing "gopkg.in/src-d/go-git.v4/plumbing"
	object "gopkg.in/src-d/go-git.v4/plumbing/object"
	storer "gopkg.in/src-d/go-git.v4/plumbing/storer"
	storage "gopkg.in/src-d/go-git.v4/storage"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CommitObject mocks base method
func (m *MockRepository) CommitObject(arg0 plumbing.Hash) (*object.Commit, error) {
	ret := m.ctrl.Call(m, "CommitObject", arg0)
	ret0, _ := ret[0].(*object.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitObject indicates an expected call of CommitObject
func (mr *MockRepositoryMockRecorder) CommitObject(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitObject", reflect.TypeOf((*MockRepository)(nil).CommitObject), arg0)
}

// Fetch mocks base method
func (m *MockRepository) Fetch(arg0 *go_git_v4.FetchOptions) error {
	ret := m.ctrl.Call(m, "Fetch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Fetch indicates an expected call of Fetch
func (mr *MockRepositoryMockRecorder) Fetch(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockRepository)(nil).Fetch), arg0)
}

// Tags mocks base method
func (m *MockRepository) Tags() (storer.ReferenceIter, error) {
	ret := m.ctrl.Call(m, "Tags")
	ret0, _ := ret[0].(storer.ReferenceIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tags indicates an expected call of Tags
func (mr *MockRepositoryMockRecorder) Tags() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tags", reflect.TypeOf((*MockRepository)(nil).Tags))
}

// MockGit is a mock of Git interface
type MockGit struct {
	ctrl     *gomock.Controller
	recorder *MockGitMockRecorder
}

// MockGitMockRecorder is the mock recorder for MockGit
type MockGitMockRecorder struct {
	mock *MockGit
}

// NewMockGit creates a new mock instance
func NewMockGit(ctrl *gomock.Controller) *MockGit {
	mock := &MockGit{ctrl: ctrl}
	mock.recorder = &MockGitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGit) EXPECT() *MockGitMockRecorder {
	return m.recorder
}

// Clone mocks base method
func (m *MockGit) Clone(arg0 storage.Storer, arg1 go_billy_v4.Filesystem, arg2 *go_git_v4.CloneOptions) (Repository, error) {
	ret := m.ctrl.Call(m, "Clone", arg0, arg1, arg2)
	ret0, _ := ret[0].(Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clone indicates an expected call of Clone
func (mr *MockGitMockRecorder) Clone(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockGit)(nil).Clone), arg0, arg1, arg2)
}
