// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/web-platform-tests/wpt.fyi/revisions/api (interfaces: API)

// Package api is a generated GoMock package.
package api

import (
	gomock "github.com/golang/mock/gomock"
	announcer "github.com/web-platform-tests/wpt.fyi/revisions/announcer"
	epoch "github.com/web-platform-tests/wpt.fyi/revisions/epoch"
	reflect "reflect"
)

// MockAPI is a mock of API interface
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// DefaultErrorJSON mocks base method
func (m *MockAPI) DefaultErrorJSON() string {
	ret := m.ctrl.Call(m, "DefaultErrorJSON")
	ret0, _ := ret[0].(string)
	return ret0
}

// DefaultErrorJSON indicates an expected call of DefaultErrorJSON
func (mr *MockAPIMockRecorder) DefaultErrorJSON() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultErrorJSON", reflect.TypeOf((*MockAPI)(nil).DefaultErrorJSON))
}

// ErrorJSON mocks base method
func (m *MockAPI) ErrorJSON(arg0 string) string {
	ret := m.ctrl.Call(m, "ErrorJSON", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// ErrorJSON indicates an expected call of ErrorJSON
func (mr *MockAPIMockRecorder) ErrorJSON(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorJSON", reflect.TypeOf((*MockAPI)(nil).ErrorJSON), arg0)
}

// GetAPIEpochs mocks base method
func (m *MockAPI) GetAPIEpochs() []Epoch {
	ret := m.ctrl.Call(m, "GetAPIEpochs")
	ret0, _ := ret[0].([]Epoch)
	return ret0
}

// GetAPIEpochs indicates an expected call of GetAPIEpochs
func (mr *MockAPIMockRecorder) GetAPIEpochs() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIEpochs", reflect.TypeOf((*MockAPI)(nil).GetAPIEpochs))
}

// GetAnnouncer mocks base method
func (m *MockAPI) GetAnnouncer() announcer.Announcer {
	ret := m.ctrl.Call(m, "GetAnnouncer")
	ret0, _ := ret[0].(announcer.Announcer)
	return ret0
}

// GetAnnouncer indicates an expected call of GetAnnouncer
func (mr *MockAPIMockRecorder) GetAnnouncer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnnouncer", reflect.TypeOf((*MockAPI)(nil).GetAnnouncer))
}

// GetEpochs mocks base method
func (m *MockAPI) GetEpochs() []epoch.Epoch {
	ret := m.ctrl.Call(m, "GetEpochs")
	ret0, _ := ret[0].([]epoch.Epoch)
	return ret0
}

// GetEpochs indicates an expected call of GetEpochs
func (mr *MockAPIMockRecorder) GetEpochs() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpochs", reflect.TypeOf((*MockAPI)(nil).GetEpochs))
}

// GetEpochsMap mocks base method
func (m *MockAPI) GetEpochsMap() map[string]epoch.Epoch {
	ret := m.ctrl.Call(m, "GetEpochsMap")
	ret0, _ := ret[0].(map[string]epoch.Epoch)
	return ret0
}

// GetEpochsMap indicates an expected call of GetEpochsMap
func (mr *MockAPIMockRecorder) GetEpochsMap() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpochsMap", reflect.TypeOf((*MockAPI)(nil).GetEpochsMap))
}

// GetLatestGetRevisionsInput mocks base method
func (m *MockAPI) GetLatestGetRevisionsInput() map[epoch.Epoch]int {
	ret := m.ctrl.Call(m, "GetLatestGetRevisionsInput")
	ret0, _ := ret[0].(map[epoch.Epoch]int)
	return ret0
}

// GetLatestGetRevisionsInput indicates an expected call of GetLatestGetRevisionsInput
func (mr *MockAPIMockRecorder) GetLatestGetRevisionsInput() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestGetRevisionsInput", reflect.TypeOf((*MockAPI)(nil).GetLatestGetRevisionsInput))
}

// Marshal mocks base method
func (m *MockAPI) Marshal(arg0 interface{}) ([]byte, error) {
	ret := m.ctrl.Call(m, "Marshal", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Marshal indicates an expected call of Marshal
func (mr *MockAPIMockRecorder) Marshal(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshal", reflect.TypeOf((*MockAPI)(nil).Marshal), arg0)
}

// SetAnnouncer mocks base method
func (m *MockAPI) SetAnnouncer(arg0 announcer.Announcer) {
	m.ctrl.Call(m, "SetAnnouncer", arg0)
}

// SetAnnouncer indicates an expected call of SetAnnouncer
func (mr *MockAPIMockRecorder) SetAnnouncer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAnnouncer", reflect.TypeOf((*MockAPI)(nil).SetAnnouncer), arg0)
}
