// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/web-platform-tests/wpt.fyi/revisions/announcer (interfaces: EpochReferenceIterFactory)

// Package announcer is a generated GoMock package.
package announcer

import (
	gomock "github.com/golang/mock/gomock"
	git "github.com/web-platform-tests/wpt.fyi/revisions/git"
	storer "gopkg.in/src-d/go-git.v4/plumbing/storer"
	reflect "reflect"
)

// MockEpochReferenceIterFactory is a mock of EpochReferenceIterFactory interface
type MockEpochReferenceIterFactory struct {
	ctrl     *gomock.Controller
	recorder *MockEpochReferenceIterFactoryMockRecorder
}

// MockEpochReferenceIterFactoryMockRecorder is the mock recorder for MockEpochReferenceIterFactory
type MockEpochReferenceIterFactoryMockRecorder struct {
	mock *MockEpochReferenceIterFactory
}

// NewMockEpochReferenceIterFactory creates a new mock instance
func NewMockEpochReferenceIterFactory(ctrl *gomock.Controller) *MockEpochReferenceIterFactory {
	mock := &MockEpochReferenceIterFactory{ctrl: ctrl}
	mock.recorder = &MockEpochReferenceIterFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEpochReferenceIterFactory) EXPECT() *MockEpochReferenceIterFactoryMockRecorder {
	return m.recorder
}

// GetIter mocks base method
func (m *MockEpochReferenceIterFactory) GetIter(arg0 git.Repository, arg1 Limits) (storer.ReferenceIter, error) {
	ret := m.ctrl.Call(m, "GetIter", arg0, arg1)
	ret0, _ := ret[0].(storer.ReferenceIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIter indicates an expected call of GetIter
func (mr *MockEpochReferenceIterFactoryMockRecorder) GetIter(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIter", reflect.TypeOf((*MockEpochReferenceIterFactory)(nil).GetIter), arg0, arg1)
}
