// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/web-platform-tests/wpt.fyi/revisions/announcer (interfaces: Announcer,EpochReferenceIterFactory)

// Package announcer is a generated GoMock package.
package announcer

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	epoch "github.com/web-platform-tests/wpt.fyi/revisions/epoch"
	git "github.com/web-platform-tests/wpt.fyi/revisions/git"
	storer "gopkg.in/src-d/go-git.v4/plumbing/storer"
)

// MockAnnouncer is a mock of Announcer interface
type MockAnnouncer struct {
	ctrl     *gomock.Controller
	recorder *MockAnnouncerMockRecorder
}

// MockAnnouncerMockRecorder is the mock recorder for MockAnnouncer
type MockAnnouncerMockRecorder struct {
	mock *MockAnnouncer
}

// NewMockAnnouncer creates a new mock instance
func NewMockAnnouncer(ctrl *gomock.Controller) *MockAnnouncer {
	mock := &MockAnnouncer{ctrl: ctrl}
	mock.recorder = &MockAnnouncerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAnnouncer) EXPECT() *MockAnnouncerMockRecorder {
	return m.recorder
}

// Fetch mocks base method
func (m *MockAnnouncer) Fetch() error {
	ret := m.ctrl.Call(m, "Fetch")
	ret0, _ := ret[0].(error)
	return ret0
}

// Fetch indicates an expected call of Fetch
func (mr *MockAnnouncerMockRecorder) Fetch() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockAnnouncer)(nil).Fetch))
}

// GetRevisions mocks base method
func (m *MockAnnouncer) GetRevisions(arg0 map[epoch.Epoch]int, arg1 Limits) (map[epoch.Epoch][]git.Revision, error) {
	ret := m.ctrl.Call(m, "GetRevisions", arg0, arg1)
	ret0, _ := ret[0].(map[epoch.Epoch][]git.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRevisions indicates an expected call of GetRevisions
func (mr *MockAnnouncerMockRecorder) GetRevisions(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevisions", reflect.TypeOf((*MockAnnouncer)(nil).GetRevisions), arg0, arg1)
}

// Reset mocks base method
func (m *MockAnnouncer) Reset() error {
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset
func (mr *MockAnnouncerMockRecorder) Reset() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockAnnouncer)(nil).Reset))
}

// MockEpochReferenceIterFactory is a mock of EpochReferenceIterFactory interface
type MockEpochReferenceIterFactory struct {
	ctrl     *gomock.Controller
	recorder *MockEpochReferenceIterFactoryMockRecorder
}

// MockEpochReferenceIterFactoryMockRecorder is the mock recorder for MockEpochReferenceIterFactory
type MockEpochReferenceIterFactoryMockRecorder struct {
	mock *MockEpochReferenceIterFactory
}

// NewMockEpochReferenceIterFactory creates a new mock instance
func NewMockEpochReferenceIterFactory(ctrl *gomock.Controller) *MockEpochReferenceIterFactory {
	mock := &MockEpochReferenceIterFactory{ctrl: ctrl}
	mock.recorder = &MockEpochReferenceIterFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEpochReferenceIterFactory) EXPECT() *MockEpochReferenceIterFactoryMockRecorder {
	return m.recorder
}

// GetIter mocks base method
func (m *MockEpochReferenceIterFactory) GetIter(arg0 git.Repository, arg1 Limits) (storer.ReferenceIter, error) {
	ret := m.ctrl.Call(m, "GetIter", arg0, arg1)
	ret0, _ := ret[0].(storer.ReferenceIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIter indicates an expected call of GetIter
func (mr *MockEpochReferenceIterFactoryMockRecorder) GetIter(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIter", reflect.TypeOf((*MockEpochReferenceIterFactory)(nil).GetIter), arg0, arg1)
}
