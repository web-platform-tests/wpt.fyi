// Code generated by MockGen. DO NOT EDIT.
// Source: appengine.go

// Package receiver is a generated GoMock package.
package receiver

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	shared "github.com/web-platform-tests/wpt.fyi/shared"
	taskqueue "google.golang.org/appengine/taskqueue"
	io "io"
	reflect "reflect"
	time "time"
)

// MockAppEngineAPI is a mock of AppEngineAPI interface
type MockAppEngineAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAppEngineAPIMockRecorder
}

// MockAppEngineAPIMockRecorder is the mock recorder for MockAppEngineAPI
type MockAppEngineAPIMockRecorder struct {
	mock *MockAppEngineAPI
}

// NewMockAppEngineAPI creates a new mock instance
func NewMockAppEngineAPI(ctrl *gomock.Controller) *MockAppEngineAPI {
	mock := &MockAppEngineAPI{ctrl: ctrl}
	mock.recorder = &MockAppEngineAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppEngineAPI) EXPECT() *MockAppEngineAPIMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockAppEngineAPI) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockAppEngineAPIMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAppEngineAPI)(nil).Context))
}

// IsLoggedIn mocks base method
func (m *MockAppEngineAPI) IsLoggedIn() bool {
	ret := m.ctrl.Call(m, "IsLoggedIn")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLoggedIn indicates an expected call of IsLoggedIn
func (mr *MockAppEngineAPIMockRecorder) IsLoggedIn() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLoggedIn", reflect.TypeOf((*MockAppEngineAPI)(nil).IsLoggedIn))
}

// IsAdmin mocks base method
func (m *MockAppEngineAPI) IsAdmin() bool {
	ret := m.ctrl.Call(m, "IsAdmin")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAdmin indicates an expected call of IsAdmin
func (mr *MockAppEngineAPIMockRecorder) IsAdmin() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdmin", reflect.TypeOf((*MockAppEngineAPI)(nil).IsAdmin))
}

// LoginURL mocks base method
func (m *MockAppEngineAPI) LoginURL(redirect string) (string, error) {
	ret := m.ctrl.Call(m, "LoginURL", redirect)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginURL indicates an expected call of LoginURL
func (mr *MockAppEngineAPIMockRecorder) LoginURL(redirect interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginURL", reflect.TypeOf((*MockAppEngineAPI)(nil).LoginURL), redirect)
}

// addTestRun mocks base method
func (m *MockAppEngineAPI) addTestRun(testRun *shared.TestRun) (*DatastoreKey, error) {
	ret := m.ctrl.Call(m, "addTestRun", testRun)
	ret0, _ := ret[0].(*DatastoreKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// addTestRun indicates an expected call of addTestRun
func (mr *MockAppEngineAPIMockRecorder) addTestRun(testRun interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addTestRun", reflect.TypeOf((*MockAppEngineAPI)(nil).addTestRun), testRun)
}

// authenticateUploader mocks base method
func (m *MockAppEngineAPI) authenticateUploader(username, password string) bool {
	ret := m.ctrl.Call(m, "authenticateUploader", username, password)
	ret0, _ := ret[0].(bool)
	return ret0
}

// authenticateUploader indicates an expected call of authenticateUploader
func (mr *MockAppEngineAPIMockRecorder) authenticateUploader(username, password interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "authenticateUploader", reflect.TypeOf((*MockAppEngineAPI)(nil).authenticateUploader), username, password)
}

// fetchWithTimeout mocks base method
func (m *MockAppEngineAPI) fetchWithTimeout(url string, timeout time.Duration) (io.ReadCloser, error) {
	ret := m.ctrl.Call(m, "fetchWithTimeout", url, timeout)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// fetchWithTimeout indicates an expected call of fetchWithTimeout
func (mr *MockAppEngineAPIMockRecorder) fetchWithTimeout(url, timeout interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fetchWithTimeout", reflect.TypeOf((*MockAppEngineAPI)(nil).fetchWithTimeout), url, timeout)
}

// uploadToGCS mocks base method
func (m *MockAppEngineAPI) uploadToGCS(gcsPath string, f io.Reader, gzipped bool) error {
	ret := m.ctrl.Call(m, "uploadToGCS", gcsPath, f, gzipped)
	ret0, _ := ret[0].(error)
	return ret0
}

// uploadToGCS indicates an expected call of uploadToGCS
func (mr *MockAppEngineAPIMockRecorder) uploadToGCS(gcsPath, f, gzipped interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "uploadToGCS", reflect.TypeOf((*MockAppEngineAPI)(nil).uploadToGCS), gcsPath, f, gzipped)
}

// scheduleResultsTask mocks base method
func (m *MockAppEngineAPI) scheduleResultsTask(uploader string, gcsPaths []string, payloadType string, extraParams map[string]string) (*taskqueue.Task, error) {
	ret := m.ctrl.Call(m, "scheduleResultsTask", uploader, gcsPaths, payloadType, extraParams)
	ret0, _ := ret[0].(*taskqueue.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// scheduleResultsTask indicates an expected call of scheduleResultsTask
func (mr *MockAppEngineAPIMockRecorder) scheduleResultsTask(uploader, gcsPaths, payloadType, extraParams interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "scheduleResultsTask", reflect.TypeOf((*MockAppEngineAPI)(nil).scheduleResultsTask), uploader, gcsPaths, payloadType, extraParams)
}
