// Code generated by MockGen. DO NOT EDIT.
// Source: appengine.go

// Package receiver is a generated GoMock package.
package receiver

import (
	gomock "github.com/golang/mock/gomock"
	taskqueue "google.golang.org/appengine/taskqueue"
	io "io"
	reflect "reflect"
)

// MockAppEngineAPI is a mock of AppEngineAPI interface
type MockAppEngineAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAppEngineAPIMockRecorder
}

// MockAppEngineAPIMockRecorder is the mock recorder for MockAppEngineAPI
type MockAppEngineAPIMockRecorder struct {
	mock *MockAppEngineAPI
}

// NewMockAppEngineAPI creates a new mock instance
func NewMockAppEngineAPI(ctrl *gomock.Controller) *MockAppEngineAPI {
	mock := &MockAppEngineAPI{ctrl: ctrl}
	mock.recorder = &MockAppEngineAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppEngineAPI) EXPECT() *MockAppEngineAPIMockRecorder {
	return m.recorder
}

// isAdmin mocks base method
func (m *MockAppEngineAPI) isAdmin() bool {
	ret := m.ctrl.Call(m, "isAdmin")
	ret0, _ := ret[0].(bool)
	return ret0
}

// isAdmin indicates an expected call of isAdmin
func (mr *MockAppEngineAPIMockRecorder) isAdmin() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isAdmin", reflect.TypeOf((*MockAppEngineAPI)(nil).isAdmin))
}

// login mocks base method
func (m *MockAppEngineAPI) login(url string) (bool, string) {
	ret := m.ctrl.Call(m, "login", url)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// login indicates an expected call of login
func (mr *MockAppEngineAPIMockRecorder) login(url interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "login", reflect.TypeOf((*MockAppEngineAPI)(nil).login), url)
}

// uploadToGCS mocks base method
func (m *MockAppEngineAPI) uploadToGCS(fileName string, f io.Reader, gzipped bool) (string, error) {
	ret := m.ctrl.Call(m, "uploadToGCS", fileName, f, gzipped)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// uploadToGCS indicates an expected call of uploadToGCS
func (mr *MockAppEngineAPIMockRecorder) uploadToGCS(fileName, f, gzipped interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "uploadToGCS", reflect.TypeOf((*MockAppEngineAPI)(nil).uploadToGCS), fileName, f, gzipped)
}

// scheduleResultsTask mocks base method
func (m *MockAppEngineAPI) scheduleResultsTask(uploader string, gcsPaths []string, payloadType string) (*taskqueue.Task, error) {
	ret := m.ctrl.Call(m, "scheduleResultsTask", uploader, gcsPaths, payloadType)
	ret0, _ := ret[0].(*taskqueue.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// scheduleResultsTask indicates an expected call of scheduleResultsTask
func (mr *MockAppEngineAPIMockRecorder) scheduleResultsTask(uploader, gcsPaths, payloadType interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "scheduleResultsTask", reflect.TypeOf((*MockAppEngineAPI)(nil).scheduleResultsTask), uploader, gcsPaths, payloadType)
}

// fetchURL mocks base method
func (m *MockAppEngineAPI) fetchURL(url string) (io.ReadCloser, error) {
	ret := m.ctrl.Call(m, "fetchURL", url)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// fetchURL indicates an expected call of fetchURL
func (mr *MockAppEngineAPIMockRecorder) fetchURL(url interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fetchURL", reflect.TypeOf((*MockAppEngineAPI)(nil).fetchURL), url)
}
