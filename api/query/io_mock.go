// Code generated by MockGen. DO NOT EDIT.
// Source: /usr/local/go/src/io/io.go

// Package query is a generated GoMock package.
package query

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockReader is a mock of Reader interface
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockReader) Read(p []byte) (int, error) {
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockReaderMockRecorder) Read(p interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReader)(nil).Read), p)
}

// MockWriter is a mock of Writer interface
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// Write mocks base method
func (m *MockWriter) Write(p []byte) (int, error) {
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockWriterMockRecorder) Write(p interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockWriter)(nil).Write), p)
}

// MockCloser is a mock of Closer interface
type MockCloser struct {
	ctrl     *gomock.Controller
	recorder *MockCloserMockRecorder
}

// MockCloserMockRecorder is the mock recorder for MockCloser
type MockCloserMockRecorder struct {
	mock *MockCloser
}

// NewMockCloser creates a new mock instance
func NewMockCloser(ctrl *gomock.Controller) *MockCloser {
	mock := &MockCloser{ctrl: ctrl}
	mock.recorder = &MockCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloser) EXPECT() *MockCloserMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockCloser) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockCloserMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCloser)(nil).Close))
}

// MockSeeker is a mock of Seeker interface
type MockSeeker struct {
	ctrl     *gomock.Controller
	recorder *MockSeekerMockRecorder
}

// MockSeekerMockRecorder is the mock recorder for MockSeeker
type MockSeekerMockRecorder struct {
	mock *MockSeeker
}

// NewMockSeeker creates a new mock instance
func NewMockSeeker(ctrl *gomock.Controller) *MockSeeker {
	mock := &MockSeeker{ctrl: ctrl}
	mock.recorder = &MockSeekerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSeeker) EXPECT() *MockSeekerMockRecorder {
	return m.recorder
}

// Seek mocks base method
func (m *MockSeeker) Seek(offset int64, whence int) (int64, error) {
	ret := m.ctrl.Call(m, "Seek", offset, whence)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek
func (mr *MockSeekerMockRecorder) Seek(offset, whence interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockSeeker)(nil).Seek), offset, whence)
}

// MockReadWriter is a mock of ReadWriter interface
type MockReadWriter struct {
	ctrl     *gomock.Controller
	recorder *MockReadWriterMockRecorder
}

// MockReadWriterMockRecorder is the mock recorder for MockReadWriter
type MockReadWriterMockRecorder struct {
	mock *MockReadWriter
}

// NewMockReadWriter creates a new mock instance
func NewMockReadWriter(ctrl *gomock.Controller) *MockReadWriter {
	mock := &MockReadWriter{ctrl: ctrl}
	mock.recorder = &MockReadWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReadWriter) EXPECT() *MockReadWriterMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockReadWriter) Read(p []byte) (int, error) {
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockReadWriterMockRecorder) Read(p interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReadWriter)(nil).Read), p)
}

// Write mocks base method
func (m *MockReadWriter) Write(p []byte) (int, error) {
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockReadWriterMockRecorder) Write(p interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockReadWriter)(nil).Write), p)
}

// MockReadCloser is a mock of ReadCloser interface
type MockReadCloser struct {
	ctrl     *gomock.Controller
	recorder *MockReadCloserMockRecorder
}

// MockReadCloserMockRecorder is the mock recorder for MockReadCloser
type MockReadCloserMockRecorder struct {
	mock *MockReadCloser
}

// NewMockReadCloser creates a new mock instance
func NewMockReadCloser(ctrl *gomock.Controller) *MockReadCloser {
	mock := &MockReadCloser{ctrl: ctrl}
	mock.recorder = &MockReadCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReadCloser) EXPECT() *MockReadCloserMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockReadCloser) Read(p []byte) (int, error) {
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockReadCloserMockRecorder) Read(p interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReadCloser)(nil).Read), p)
}

// Close mocks base method
func (m *MockReadCloser) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockReadCloserMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockReadCloser)(nil).Close))
}

// MockWriteCloser is a mock of WriteCloser interface
type MockWriteCloser struct {
	ctrl     *gomock.Controller
	recorder *MockWriteCloserMockRecorder
}

// MockWriteCloserMockRecorder is the mock recorder for MockWriteCloser
type MockWriteCloserMockRecorder struct {
	mock *MockWriteCloser
}

// NewMockWriteCloser creates a new mock instance
func NewMockWriteCloser(ctrl *gomock.Controller) *MockWriteCloser {
	mock := &MockWriteCloser{ctrl: ctrl}
	mock.recorder = &MockWriteCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWriteCloser) EXPECT() *MockWriteCloserMockRecorder {
	return m.recorder
}

// Write mocks base method
func (m *MockWriteCloser) Write(p []byte) (int, error) {
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockWriteCloserMockRecorder) Write(p interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockWriteCloser)(nil).Write), p)
}

// Close mocks base method
func (m *MockWriteCloser) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockWriteCloserMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWriteCloser)(nil).Close))
}

// MockReadWriteCloser is a mock of ReadWriteCloser interface
type MockReadWriteCloser struct {
	ctrl     *gomock.Controller
	recorder *MockReadWriteCloserMockRecorder
}

// MockReadWriteCloserMockRecorder is the mock recorder for MockReadWriteCloser
type MockReadWriteCloserMockRecorder struct {
	mock *MockReadWriteCloser
}

// NewMockReadWriteCloser creates a new mock instance
func NewMockReadWriteCloser(ctrl *gomock.Controller) *MockReadWriteCloser {
	mock := &MockReadWriteCloser{ctrl: ctrl}
	mock.recorder = &MockReadWriteCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReadWriteCloser) EXPECT() *MockReadWriteCloserMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockReadWriteCloser) Read(p []byte) (int, error) {
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockReadWriteCloserMockRecorder) Read(p interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReadWriteCloser)(nil).Read), p)
}

// Write mocks base method
func (m *MockReadWriteCloser) Write(p []byte) (int, error) {
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockReadWriteCloserMockRecorder) Write(p interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockReadWriteCloser)(nil).Write), p)
}

// Close mocks base method
func (m *MockReadWriteCloser) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockReadWriteCloserMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockReadWriteCloser)(nil).Close))
}

// MockReadSeeker is a mock of ReadSeeker interface
type MockReadSeeker struct {
	ctrl     *gomock.Controller
	recorder *MockReadSeekerMockRecorder
}

// MockReadSeekerMockRecorder is the mock recorder for MockReadSeeker
type MockReadSeekerMockRecorder struct {
	mock *MockReadSeeker
}

// NewMockReadSeeker creates a new mock instance
func NewMockReadSeeker(ctrl *gomock.Controller) *MockReadSeeker {
	mock := &MockReadSeeker{ctrl: ctrl}
	mock.recorder = &MockReadSeekerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReadSeeker) EXPECT() *MockReadSeekerMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockReadSeeker) Read(p []byte) (int, error) {
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockReadSeekerMockRecorder) Read(p interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReadSeeker)(nil).Read), p)
}

// Seek mocks base method
func (m *MockReadSeeker) Seek(offset int64, whence int) (int64, error) {
	ret := m.ctrl.Call(m, "Seek", offset, whence)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek
func (mr *MockReadSeekerMockRecorder) Seek(offset, whence interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockReadSeeker)(nil).Seek), offset, whence)
}

// MockWriteSeeker is a mock of WriteSeeker interface
type MockWriteSeeker struct {
	ctrl     *gomock.Controller
	recorder *MockWriteSeekerMockRecorder
}

// MockWriteSeekerMockRecorder is the mock recorder for MockWriteSeeker
type MockWriteSeekerMockRecorder struct {
	mock *MockWriteSeeker
}

// NewMockWriteSeeker creates a new mock instance
func NewMockWriteSeeker(ctrl *gomock.Controller) *MockWriteSeeker {
	mock := &MockWriteSeeker{ctrl: ctrl}
	mock.recorder = &MockWriteSeekerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWriteSeeker) EXPECT() *MockWriteSeekerMockRecorder {
	return m.recorder
}

// Write mocks base method
func (m *MockWriteSeeker) Write(p []byte) (int, error) {
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockWriteSeekerMockRecorder) Write(p interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockWriteSeeker)(nil).Write), p)
}

// Seek mocks base method
func (m *MockWriteSeeker) Seek(offset int64, whence int) (int64, error) {
	ret := m.ctrl.Call(m, "Seek", offset, whence)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek
func (mr *MockWriteSeekerMockRecorder) Seek(offset, whence interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockWriteSeeker)(nil).Seek), offset, whence)
}

// MockReadWriteSeeker is a mock of ReadWriteSeeker interface
type MockReadWriteSeeker struct {
	ctrl     *gomock.Controller
	recorder *MockReadWriteSeekerMockRecorder
}

// MockReadWriteSeekerMockRecorder is the mock recorder for MockReadWriteSeeker
type MockReadWriteSeekerMockRecorder struct {
	mock *MockReadWriteSeeker
}

// NewMockReadWriteSeeker creates a new mock instance
func NewMockReadWriteSeeker(ctrl *gomock.Controller) *MockReadWriteSeeker {
	mock := &MockReadWriteSeeker{ctrl: ctrl}
	mock.recorder = &MockReadWriteSeekerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReadWriteSeeker) EXPECT() *MockReadWriteSeekerMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockReadWriteSeeker) Read(p []byte) (int, error) {
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockReadWriteSeekerMockRecorder) Read(p interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReadWriteSeeker)(nil).Read), p)
}

// Write mocks base method
func (m *MockReadWriteSeeker) Write(p []byte) (int, error) {
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockReadWriteSeekerMockRecorder) Write(p interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockReadWriteSeeker)(nil).Write), p)
}

// Seek mocks base method
func (m *MockReadWriteSeeker) Seek(offset int64, whence int) (int64, error) {
	ret := m.ctrl.Call(m, "Seek", offset, whence)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek
func (mr *MockReadWriteSeekerMockRecorder) Seek(offset, whence interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockReadWriteSeeker)(nil).Seek), offset, whence)
}

// MockReaderFrom is a mock of ReaderFrom interface
type MockReaderFrom struct {
	ctrl     *gomock.Controller
	recorder *MockReaderFromMockRecorder
}

// MockReaderFromMockRecorder is the mock recorder for MockReaderFrom
type MockReaderFromMockRecorder struct {
	mock *MockReaderFrom
}

// NewMockReaderFrom creates a new mock instance
func NewMockReaderFrom(ctrl *gomock.Controller) *MockReaderFrom {
	mock := &MockReaderFrom{ctrl: ctrl}
	mock.recorder = &MockReaderFromMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReaderFrom) EXPECT() *MockReaderFromMockRecorder {
	return m.recorder
}

// ReadFrom mocks base method
func (m *MockReaderFrom) ReadFrom(r io.Reader) (int64, error) {
	ret := m.ctrl.Call(m, "ReadFrom", r)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFrom indicates an expected call of ReadFrom
func (mr *MockReaderFromMockRecorder) ReadFrom(r interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFrom", reflect.TypeOf((*MockReaderFrom)(nil).ReadFrom), r)
}

// MockWriterTo is a mock of WriterTo interface
type MockWriterTo struct {
	ctrl     *gomock.Controller
	recorder *MockWriterToMockRecorder
}

// MockWriterToMockRecorder is the mock recorder for MockWriterTo
type MockWriterToMockRecorder struct {
	mock *MockWriterTo
}

// NewMockWriterTo creates a new mock instance
func NewMockWriterTo(ctrl *gomock.Controller) *MockWriterTo {
	mock := &MockWriterTo{ctrl: ctrl}
	mock.recorder = &MockWriterToMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWriterTo) EXPECT() *MockWriterToMockRecorder {
	return m.recorder
}

// WriteTo mocks base method
func (m *MockWriterTo) WriteTo(w io.Writer) (int64, error) {
	ret := m.ctrl.Call(m, "WriteTo", w)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteTo indicates an expected call of WriteTo
func (mr *MockWriterToMockRecorder) WriteTo(w interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTo", reflect.TypeOf((*MockWriterTo)(nil).WriteTo), w)
}

// MockReaderAt is a mock of ReaderAt interface
type MockReaderAt struct {
	ctrl     *gomock.Controller
	recorder *MockReaderAtMockRecorder
}

// MockReaderAtMockRecorder is the mock recorder for MockReaderAt
type MockReaderAtMockRecorder struct {
	mock *MockReaderAt
}

// NewMockReaderAt creates a new mock instance
func NewMockReaderAt(ctrl *gomock.Controller) *MockReaderAt {
	mock := &MockReaderAt{ctrl: ctrl}
	mock.recorder = &MockReaderAtMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReaderAt) EXPECT() *MockReaderAtMockRecorder {
	return m.recorder
}

// ReadAt mocks base method
func (m *MockReaderAt) ReadAt(p []byte, off int64) (int, error) {
	ret := m.ctrl.Call(m, "ReadAt", p, off)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAt indicates an expected call of ReadAt
func (mr *MockReaderAtMockRecorder) ReadAt(p, off interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAt", reflect.TypeOf((*MockReaderAt)(nil).ReadAt), p, off)
}

// MockWriterAt is a mock of WriterAt interface
type MockWriterAt struct {
	ctrl     *gomock.Controller
	recorder *MockWriterAtMockRecorder
}

// MockWriterAtMockRecorder is the mock recorder for MockWriterAt
type MockWriterAtMockRecorder struct {
	mock *MockWriterAt
}

// NewMockWriterAt creates a new mock instance
func NewMockWriterAt(ctrl *gomock.Controller) *MockWriterAt {
	mock := &MockWriterAt{ctrl: ctrl}
	mock.recorder = &MockWriterAtMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWriterAt) EXPECT() *MockWriterAtMockRecorder {
	return m.recorder
}

// WriteAt mocks base method
func (m *MockWriterAt) WriteAt(p []byte, off int64) (int, error) {
	ret := m.ctrl.Call(m, "WriteAt", p, off)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteAt indicates an expected call of WriteAt
func (mr *MockWriterAtMockRecorder) WriteAt(p, off interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAt", reflect.TypeOf((*MockWriterAt)(nil).WriteAt), p, off)
}

// MockByteReader is a mock of ByteReader interface
type MockByteReader struct {
	ctrl     *gomock.Controller
	recorder *MockByteReaderMockRecorder
}

// MockByteReaderMockRecorder is the mock recorder for MockByteReader
type MockByteReaderMockRecorder struct {
	mock *MockByteReader
}

// NewMockByteReader creates a new mock instance
func NewMockByteReader(ctrl *gomock.Controller) *MockByteReader {
	mock := &MockByteReader{ctrl: ctrl}
	mock.recorder = &MockByteReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockByteReader) EXPECT() *MockByteReaderMockRecorder {
	return m.recorder
}

// ReadByte mocks base method
func (m *MockByteReader) ReadByte() (byte, error) {
	ret := m.ctrl.Call(m, "ReadByte")
	ret0, _ := ret[0].(byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByte indicates an expected call of ReadByte
func (mr *MockByteReaderMockRecorder) ReadByte() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByte", reflect.TypeOf((*MockByteReader)(nil).ReadByte))
}

// MockByteScanner is a mock of ByteScanner interface
type MockByteScanner struct {
	ctrl     *gomock.Controller
	recorder *MockByteScannerMockRecorder
}

// MockByteScannerMockRecorder is the mock recorder for MockByteScanner
type MockByteScannerMockRecorder struct {
	mock *MockByteScanner
}

// NewMockByteScanner creates a new mock instance
func NewMockByteScanner(ctrl *gomock.Controller) *MockByteScanner {
	mock := &MockByteScanner{ctrl: ctrl}
	mock.recorder = &MockByteScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockByteScanner) EXPECT() *MockByteScannerMockRecorder {
	return m.recorder
}

// ReadByte mocks base method
func (m *MockByteScanner) ReadByte() (byte, error) {
	ret := m.ctrl.Call(m, "ReadByte")
	ret0, _ := ret[0].(byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByte indicates an expected call of ReadByte
func (mr *MockByteScannerMockRecorder) ReadByte() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByte", reflect.TypeOf((*MockByteScanner)(nil).ReadByte))
}

// UnreadByte mocks base method
func (m *MockByteScanner) UnreadByte() error {
	ret := m.ctrl.Call(m, "UnreadByte")
	ret0, _ := ret[0].(error)
	return ret0
}

// UnreadByte indicates an expected call of UnreadByte
func (mr *MockByteScannerMockRecorder) UnreadByte() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnreadByte", reflect.TypeOf((*MockByteScanner)(nil).UnreadByte))
}

// MockByteWriter is a mock of ByteWriter interface
type MockByteWriter struct {
	ctrl     *gomock.Controller
	recorder *MockByteWriterMockRecorder
}

// MockByteWriterMockRecorder is the mock recorder for MockByteWriter
type MockByteWriterMockRecorder struct {
	mock *MockByteWriter
}

// NewMockByteWriter creates a new mock instance
func NewMockByteWriter(ctrl *gomock.Controller) *MockByteWriter {
	mock := &MockByteWriter{ctrl: ctrl}
	mock.recorder = &MockByteWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockByteWriter) EXPECT() *MockByteWriterMockRecorder {
	return m.recorder
}

// WriteByte mocks base method
func (m *MockByteWriter) WriteByte(c byte) error {
	ret := m.ctrl.Call(m, "WriteByte", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteByte indicates an expected call of WriteByte
func (mr *MockByteWriterMockRecorder) WriteByte(c interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteByte", reflect.TypeOf((*MockByteWriter)(nil).WriteByte), c)
}

// MockRuneReader is a mock of RuneReader interface
type MockRuneReader struct {
	ctrl     *gomock.Controller
	recorder *MockRuneReaderMockRecorder
}

// MockRuneReaderMockRecorder is the mock recorder for MockRuneReader
type MockRuneReaderMockRecorder struct {
	mock *MockRuneReader
}

// NewMockRuneReader creates a new mock instance
func NewMockRuneReader(ctrl *gomock.Controller) *MockRuneReader {
	mock := &MockRuneReader{ctrl: ctrl}
	mock.recorder = &MockRuneReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRuneReader) EXPECT() *MockRuneReaderMockRecorder {
	return m.recorder
}

// ReadRune mocks base method
func (m *MockRuneReader) ReadRune() (rune, int, error) {
	ret := m.ctrl.Call(m, "ReadRune")
	ret0, _ := ret[0].(rune)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadRune indicates an expected call of ReadRune
func (mr *MockRuneReaderMockRecorder) ReadRune() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRune", reflect.TypeOf((*MockRuneReader)(nil).ReadRune))
}

// MockRuneScanner is a mock of RuneScanner interface
type MockRuneScanner struct {
	ctrl     *gomock.Controller
	recorder *MockRuneScannerMockRecorder
}

// MockRuneScannerMockRecorder is the mock recorder for MockRuneScanner
type MockRuneScannerMockRecorder struct {
	mock *MockRuneScanner
}

// NewMockRuneScanner creates a new mock instance
func NewMockRuneScanner(ctrl *gomock.Controller) *MockRuneScanner {
	mock := &MockRuneScanner{ctrl: ctrl}
	mock.recorder = &MockRuneScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRuneScanner) EXPECT() *MockRuneScannerMockRecorder {
	return m.recorder
}

// ReadRune mocks base method
func (m *MockRuneScanner) ReadRune() (rune, int, error) {
	ret := m.ctrl.Call(m, "ReadRune")
	ret0, _ := ret[0].(rune)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadRune indicates an expected call of ReadRune
func (mr *MockRuneScannerMockRecorder) ReadRune() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRune", reflect.TypeOf((*MockRuneScanner)(nil).ReadRune))
}

// UnreadRune mocks base method
func (m *MockRuneScanner) UnreadRune() error {
	ret := m.ctrl.Call(m, "UnreadRune")
	ret0, _ := ret[0].(error)
	return ret0
}

// UnreadRune indicates an expected call of UnreadRune
func (mr *MockRuneScannerMockRecorder) UnreadRune() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnreadRune", reflect.TypeOf((*MockRuneScanner)(nil).UnreadRune))
}

// MockstringWriter is a mock of stringWriter interface
type MockstringWriter struct {
	ctrl     *gomock.Controller
	recorder *MockstringWriterMockRecorder
}

// MockstringWriterMockRecorder is the mock recorder for MockstringWriter
type MockstringWriterMockRecorder struct {
	mock *MockstringWriter
}

// NewMockstringWriter creates a new mock instance
func NewMockstringWriter(ctrl *gomock.Controller) *MockstringWriter {
	mock := &MockstringWriter{ctrl: ctrl}
	mock.recorder = &MockstringWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockstringWriter) EXPECT() *MockstringWriterMockRecorder {
	return m.recorder
}

// WriteString mocks base method
func (m *MockstringWriter) WriteString(s string) (int, error) {
	ret := m.ctrl.Call(m, "WriteString", s)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteString indicates an expected call of WriteString
func (mr *MockstringWriterMockRecorder) WriteString(s interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteString", reflect.TypeOf((*MockstringWriter)(nil).WriteString), s)
}
