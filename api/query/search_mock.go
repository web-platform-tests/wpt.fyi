// Code generated by MockGen. DO NOT EDIT.
// Source: search.go

// Package query is a generated GoMock package.
package query

import (
	golang_set "github.com/deckarep/golang-set"
	gomock "github.com/golang/mock/gomock"
	shared "github.com/web-platform-tests/wpt.fyi/shared"
	io "io"
	http "net/http"
	reflect "reflect"
	time "time"
)

// Mockreadable is a mock of readable interface
type Mockreadable struct {
	ctrl     *gomock.Controller
	recorder *MockreadableMockRecorder
}

// MockreadableMockRecorder is the mock recorder for Mockreadable
type MockreadableMockRecorder struct {
	mock *Mockreadable
}

// NewMockreadable creates a new mock instance
func NewMockreadable(ctrl *gomock.Controller) *Mockreadable {
	mock := &Mockreadable{ctrl: ctrl}
	mock.recorder = &MockreadableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockreadable) EXPECT() *MockreadableMockRecorder {
	return m.recorder
}

// NewReadCloser mocks base method
func (m *Mockreadable) NewReadCloser(arg0 string) (io.ReadCloser, error) {
	ret := m.ctrl.Call(m, "NewReadCloser", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewReadCloser indicates an expected call of NewReadCloser
func (mr *MockreadableMockRecorder) NewReadCloser(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewReadCloser", reflect.TypeOf((*Mockreadable)(nil).NewReadCloser), arg0)
}

// MockreadWritable is a mock of readWritable interface
type MockreadWritable struct {
	ctrl     *gomock.Controller
	recorder *MockreadWritableMockRecorder
}

// MockreadWritableMockRecorder is the mock recorder for MockreadWritable
type MockreadWritableMockRecorder struct {
	mock *MockreadWritable
}

// NewMockreadWritable creates a new mock instance
func NewMockreadWritable(ctrl *gomock.Controller) *MockreadWritable {
	mock := &MockreadWritable{ctrl: ctrl}
	mock.recorder = &MockreadWritableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockreadWritable) EXPECT() *MockreadWritableMockRecorder {
	return m.recorder
}

// NewReadCloser mocks base method
func (m *MockreadWritable) NewReadCloser(arg0 string) (io.ReadCloser, error) {
	ret := m.ctrl.Call(m, "NewReadCloser", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewReadCloser indicates an expected call of NewReadCloser
func (mr *MockreadWritableMockRecorder) NewReadCloser(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewReadCloser", reflect.TypeOf((*MockreadWritable)(nil).NewReadCloser), arg0)
}

// NewWriteCloser mocks base method
func (m *MockreadWritable) NewWriteCloser(arg0 string) (io.WriteCloser, error) {
	ret := m.ctrl.Call(m, "NewWriteCloser", arg0)
	ret0, _ := ret[0].(io.WriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewWriteCloser indicates an expected call of NewWriteCloser
func (mr *MockreadWritableMockRecorder) NewWriteCloser(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWriteCloser", reflect.TypeOf((*MockreadWritable)(nil).NewWriteCloser), arg0)
}

// MocksharedInterface is a mock of sharedInterface interface
type MocksharedInterface struct {
	ctrl     *gomock.Controller
	recorder *MocksharedInterfaceMockRecorder
}

// MocksharedInterfaceMockRecorder is the mock recorder for MocksharedInterface
type MocksharedInterfaceMockRecorder struct {
	mock *MocksharedInterface
}

// NewMocksharedInterface creates a new mock instance
func NewMocksharedInterface(ctrl *gomock.Controller) *MocksharedInterface {
	mock := &MocksharedInterface{ctrl: ctrl}
	mock.recorder = &MocksharedInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocksharedInterface) EXPECT() *MocksharedInterfaceMockRecorder {
	return m.recorder
}

// ParseSearchFilterParams mocks base method
func (m *MocksharedInterface) ParseSearchFilterParams(arg0 *http.Request) (shared.SearchFilter, error) {
	ret := m.ctrl.Call(m, "ParseSearchFilterParams", arg0)
	ret0, _ := ret[0].(shared.SearchFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseSearchFilterParams indicates an expected call of ParseSearchFilterParams
func (mr *MocksharedInterfaceMockRecorder) ParseSearchFilterParams(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseSearchFilterParams", reflect.TypeOf((*MocksharedInterface)(nil).ParseSearchFilterParams), arg0)
}

// LoadTestRuns mocks base method
func (m *MocksharedInterface) LoadTestRuns(arg0 []shared.ProductSpec, arg1 golang_set.Set, arg2 []string, arg3, arg4 *time.Time, arg5 *int) ([]shared.TestRun, error) {
	ret := m.ctrl.Call(m, "LoadTestRuns", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]shared.TestRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadTestRuns indicates an expected call of LoadTestRuns
func (mr *MocksharedInterfaceMockRecorder) LoadTestRuns(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadTestRuns", reflect.TypeOf((*MocksharedInterface)(nil).LoadTestRuns), arg0, arg1, arg2, arg3, arg4, arg5)
}

// LoadTestRun mocks base method
func (m *MocksharedInterface) LoadTestRun(arg0 int64) (*shared.TestRun, error) {
	ret := m.ctrl.Call(m, "LoadTestRun", arg0)
	ret0, _ := ret[0].(*shared.TestRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadTestRun indicates an expected call of LoadTestRun
func (mr *MocksharedInterfaceMockRecorder) LoadTestRun(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadTestRun", reflect.TypeOf((*MocksharedInterface)(nil).LoadTestRun), arg0)
}
