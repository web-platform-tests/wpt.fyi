// Code generated by MockGen. DO NOT EDIT.
// Source: search.go

// Package api is a generated GoMock package.
package api

import (
	golang_set "github.com/deckarep/golang-set"
	gomock "github.com/golang/mock/gomock"
	shared "github.com/web-platform-tests/wpt.fyi/shared"
	http "net/http"
	reflect "reflect"
	time "time"
)

// Mockreadable is a mock of readable interface
type Mockreadable struct {
	ctrl     *gomock.Controller
	recorder *MockreadableMockRecorder
}

// MockreadableMockRecorder is the mock recorder for Mockreadable
type MockreadableMockRecorder struct {
	mock *Mockreadable
}

// NewMockreadable creates a new mock instance
func NewMockreadable(ctrl *gomock.Controller) *Mockreadable {
	mock := &Mockreadable{ctrl: ctrl}
	mock.recorder = &MockreadableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockreadable) EXPECT() *MockreadableMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *Mockreadable) Get(arg0 string) ([]byte, error) {
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockreadableMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Mockreadable)(nil).Get), arg0)
}

// MockreadWritable is a mock of readWritable interface
type MockreadWritable struct {
	ctrl     *gomock.Controller
	recorder *MockreadWritableMockRecorder
}

// MockreadWritableMockRecorder is the mock recorder for MockreadWritable
type MockreadWritableMockRecorder struct {
	mock *MockreadWritable
}

// NewMockreadWritable creates a new mock instance
func NewMockreadWritable(ctrl *gomock.Controller) *MockreadWritable {
	mock := &MockreadWritable{ctrl: ctrl}
	mock.recorder = &MockreadWritableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockreadWritable) EXPECT() *MockreadWritableMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockreadWritable) Get(arg0 string) ([]byte, error) {
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockreadWritableMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockreadWritable)(nil).Get), arg0)
}

// Put mocks base method
func (m *MockreadWritable) Put(arg0 string, arg1 []byte) error {
	ret := m.ctrl.Call(m, "Put", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockreadWritableMockRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockreadWritable)(nil).Put), arg0, arg1)
}

// MocksharedImpl is a mock of sharedImpl interface
type MocksharedImpl struct {
	ctrl     *gomock.Controller
	recorder *MocksharedImplMockRecorder
}

// MocksharedImplMockRecorder is the mock recorder for MocksharedImpl
type MocksharedImplMockRecorder struct {
	mock *MocksharedImpl
}

// NewMocksharedImpl creates a new mock instance
func NewMocksharedImpl(ctrl *gomock.Controller) *MocksharedImpl {
	mock := &MocksharedImpl{ctrl: ctrl}
	mock.recorder = &MocksharedImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocksharedImpl) EXPECT() *MocksharedImplMockRecorder {
	return m.recorder
}

// ParseSearchFilterParams mocks base method
func (m *MocksharedImpl) ParseSearchFilterParams(arg0 *http.Request) (shared.SearchFilter, error) {
	ret := m.ctrl.Call(m, "ParseSearchFilterParams", arg0)
	ret0, _ := ret[0].(shared.SearchFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseSearchFilterParams indicates an expected call of ParseSearchFilterParams
func (mr *MocksharedImplMockRecorder) ParseSearchFilterParams(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseSearchFilterParams", reflect.TypeOf((*MocksharedImpl)(nil).ParseSearchFilterParams), arg0)
}

// LoadTestRuns mocks base method
func (m *MocksharedImpl) LoadTestRuns(arg0 []shared.ProductSpec, arg1 golang_set.Set, arg2 []string, arg3, arg4 *time.Time, arg5 *int) ([]shared.TestRun, error) {
	ret := m.ctrl.Call(m, "LoadTestRuns", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]shared.TestRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadTestRuns indicates an expected call of LoadTestRuns
func (mr *MocksharedImplMockRecorder) LoadTestRuns(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadTestRuns", reflect.TypeOf((*MocksharedImpl)(nil).LoadTestRuns), arg0, arg1, arg2, arg3, arg4, arg5)
}

// LoadTestRun mocks base method
func (m *MocksharedImpl) LoadTestRun(arg0 int64) (*shared.TestRun, error) {
	ret := m.ctrl.Call(m, "LoadTestRun", arg0)
	ret0, _ := ret[0].(*shared.TestRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadTestRun indicates an expected call of LoadTestRun
func (mr *MocksharedImplMockRecorder) LoadTestRun(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadTestRun", reflect.TypeOf((*MocksharedImpl)(nil).LoadTestRun), arg0)
}
