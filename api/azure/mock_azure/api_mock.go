// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/web-platform-tests/wpt.fyi/api/azure (interfaces: API)

// Package mock_azure is a generated GoMock package.
package mock_azure

import (
	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/github"
	reflect "reflect"
)

// MockAPI is a mock of API interface
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// GetAzureArtifactsURL mocks base method
func (m *MockAPI) GetAzureArtifactsURL(arg0, arg1 string, arg2 int64) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureArtifactsURL", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAzureArtifactsURL indicates an expected call of GetAzureArtifactsURL
func (mr *MockAPIMockRecorder) GetAzureArtifactsURL(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureArtifactsURL", reflect.TypeOf((*MockAPI)(nil).GetAzureArtifactsURL), arg0, arg1, arg2)
}

// GetAzureBuildURL mocks base method
func (m *MockAPI) GetAzureBuildURL(arg0, arg1 string, arg2 int64) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureBuildURL", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAzureBuildURL indicates an expected call of GetAzureBuildURL
func (mr *MockAPIMockRecorder) GetAzureBuildURL(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureBuildURL", reflect.TypeOf((*MockAPI)(nil).GetAzureBuildURL), arg0, arg1, arg2)
}

// HandleCheckRunEvent mocks base method
func (m *MockAPI) HandleCheckRunEvent(arg0 *github.CheckRunEvent) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleCheckRunEvent", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleCheckRunEvent indicates an expected call of HandleCheckRunEvent
func (mr *MockAPIMockRecorder) HandleCheckRunEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCheckRunEvent", reflect.TypeOf((*MockAPI)(nil).HandleCheckRunEvent), arg0)
}

// IsMasterBranch mocks base method
func (m *MockAPI) IsMasterBranch(arg0, arg1 string, arg2 int64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMasterBranch", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMasterBranch indicates an expected call of IsMasterBranch
func (mr *MockAPIMockRecorder) IsMasterBranch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMasterBranch", reflect.TypeOf((*MockAPI)(nil).IsMasterBranch), arg0, arg1, arg2)
}
