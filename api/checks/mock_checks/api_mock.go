// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/web-platform-tests/wpt.fyi/api/checks (interfaces: API)
//
// Generated by this command:
//
//	mockgen -build_flags=--mod=mod -destination mock_checks/api_mock.go github.com/web-platform-tests/wpt.fyi/api/checks API
//

// Package mock_checks is a generated GoMock package.
package mock_checks

import (
	context "context"
	http "net/http"
	url "net/url"
	reflect "reflect"
	time "time"

	github "github.com/google/go-github/v65/github"
	shared "github.com/web-platform-tests/wpt.fyi/shared"
	gomock "go.uber.org/mock/gomock"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
	isgomock struct{}
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// CancelRun mocks base method.
func (m *MockAPI) CancelRun(sender, owner, repo string, run *github.CheckRun, installation *github.Installation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelRun", sender, owner, repo, run, installation)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelRun indicates an expected call of CancelRun.
func (mr *MockAPIMockRecorder) CancelRun(sender, owner, repo, run, installation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelRun", reflect.TypeOf((*MockAPI)(nil).CancelRun), sender, owner, repo, run, installation)
}

// Context mocks base method.
func (m *MockAPI) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockAPIMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAPI)(nil).Context))
}

// CreateWPTCheckSuite mocks base method.
func (m *MockAPI) CreateWPTCheckSuite(appID, installationID int64, sha string, prNumbers ...int) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []any{appID, installationID, sha}
	for _, a := range prNumbers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWPTCheckSuite", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWPTCheckSuite indicates an expected call of CreateWPTCheckSuite.
func (mr *MockAPIMockRecorder) CreateWPTCheckSuite(appID, installationID, sha any, prNumbers ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{appID, installationID, sha}, prNumbers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWPTCheckSuite", reflect.TypeOf((*MockAPI)(nil).CreateWPTCheckSuite), varargs...)
}

// GetGitHubClient mocks base method.
func (m *MockAPI) GetGitHubClient() (*github.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitHubClient")
	ret0, _ := ret[0].(*github.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitHubClient indicates an expected call of GetGitHubClient.
func (mr *MockAPIMockRecorder) GetGitHubClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitHubClient", reflect.TypeOf((*MockAPI)(nil).GetGitHubClient))
}

// GetHTTPClient mocks base method.
func (m *MockAPI) GetHTTPClient() *http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHTTPClient")
	ret0, _ := ret[0].(*http.Client)
	return ret0
}

// GetHTTPClient indicates an expected call of GetHTTPClient.
func (mr *MockAPIMockRecorder) GetHTTPClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHTTPClient", reflect.TypeOf((*MockAPI)(nil).GetHTTPClient))
}

// GetHTTPClientWithTimeout mocks base method.
func (m *MockAPI) GetHTTPClientWithTimeout(arg0 time.Duration) *http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHTTPClientWithTimeout", arg0)
	ret0, _ := ret[0].(*http.Client)
	return ret0
}

// GetHTTPClientWithTimeout indicates an expected call of GetHTTPClientWithTimeout.
func (mr *MockAPIMockRecorder) GetHTTPClientWithTimeout(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHTTPClientWithTimeout", reflect.TypeOf((*MockAPI)(nil).GetHTTPClientWithTimeout), arg0)
}

// GetHostname mocks base method.
func (m *MockAPI) GetHostname() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostname")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHostname indicates an expected call of GetHostname.
func (mr *MockAPIMockRecorder) GetHostname() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostname", reflect.TypeOf((*MockAPI)(nil).GetHostname))
}

// GetResultsURL mocks base method.
func (m *MockAPI) GetResultsURL(filter shared.TestRunFilter) *url.URL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResultsURL", filter)
	ret0, _ := ret[0].(*url.URL)
	return ret0
}

// GetResultsURL indicates an expected call of GetResultsURL.
func (mr *MockAPIMockRecorder) GetResultsURL(filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResultsURL", reflect.TypeOf((*MockAPI)(nil).GetResultsURL), filter)
}

// GetResultsUploadURL mocks base method.
func (m *MockAPI) GetResultsUploadURL() *url.URL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResultsUploadURL")
	ret0, _ := ret[0].(*url.URL)
	return ret0
}

// GetResultsUploadURL indicates an expected call of GetResultsUploadURL.
func (mr *MockAPIMockRecorder) GetResultsUploadURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResultsUploadURL", reflect.TypeOf((*MockAPI)(nil).GetResultsUploadURL))
}

// GetRunsURL mocks base method.
func (m *MockAPI) GetRunsURL(filter shared.TestRunFilter) *url.URL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunsURL", filter)
	ret0, _ := ret[0].(*url.URL)
	return ret0
}

// GetRunsURL indicates an expected call of GetRunsURL.
func (mr *MockAPIMockRecorder) GetRunsURL(filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunsURL", reflect.TypeOf((*MockAPI)(nil).GetRunsURL), filter)
}

// GetServiceHostname mocks base method.
func (m *MockAPI) GetServiceHostname(service string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceHostname", service)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetServiceHostname indicates an expected call of GetServiceHostname.
func (mr *MockAPIMockRecorder) GetServiceHostname(service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceHostname", reflect.TypeOf((*MockAPI)(nil).GetServiceHostname), service)
}

// GetSuitesForSHA mocks base method.
func (m *MockAPI) GetSuitesForSHA(sha string) ([]shared.CheckSuite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuitesForSHA", sha)
	ret0, _ := ret[0].([]shared.CheckSuite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuitesForSHA indicates an expected call of GetSuitesForSHA.
func (mr *MockAPIMockRecorder) GetSuitesForSHA(sha any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuitesForSHA", reflect.TypeOf((*MockAPI)(nil).GetSuitesForSHA), sha)
}

// GetUploader mocks base method.
func (m *MockAPI) GetUploader(uploader string) (shared.Uploader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUploader", uploader)
	ret0, _ := ret[0].(shared.Uploader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUploader indicates an expected call of GetUploader.
func (mr *MockAPIMockRecorder) GetUploader(uploader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploader", reflect.TypeOf((*MockAPI)(nil).GetUploader), uploader)
}

// GetVersion mocks base method.
func (m *MockAPI) GetVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockAPIMockRecorder) GetVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockAPI)(nil).GetVersion))
}

// GetVersionedHostname mocks base method.
func (m *MockAPI) GetVersionedHostname() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersionedHostname")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetVersionedHostname indicates an expected call of GetVersionedHostname.
func (mr *MockAPIMockRecorder) GetVersionedHostname() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersionedHostname", reflect.TypeOf((*MockAPI)(nil).GetVersionedHostname))
}

// GetWPTRepoAppInstallationIDs mocks base method.
func (m *MockAPI) GetWPTRepoAppInstallationIDs() (int64, int64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWPTRepoAppInstallationIDs")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	return ret0, ret1
}

// GetWPTRepoAppInstallationIDs indicates an expected call of GetWPTRepoAppInstallationIDs.
func (mr *MockAPIMockRecorder) GetWPTRepoAppInstallationIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWPTRepoAppInstallationIDs", reflect.TypeOf((*MockAPI)(nil).GetWPTRepoAppInstallationIDs))
}

// IgnoreFailure mocks base method.
func (m *MockAPI) IgnoreFailure(sender, owner, repo string, run *github.CheckRun, installation *github.Installation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgnoreFailure", sender, owner, repo, run, installation)
	ret0, _ := ret[0].(error)
	return ret0
}

// IgnoreFailure indicates an expected call of IgnoreFailure.
func (mr *MockAPIMockRecorder) IgnoreFailure(sender, owner, repo, run, installation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgnoreFailure", reflect.TypeOf((*MockAPI)(nil).IgnoreFailure), sender, owner, repo, run, installation)
}

// IsFeatureEnabled mocks base method.
func (m *MockAPI) IsFeatureEnabled(featureName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFeatureEnabled", featureName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFeatureEnabled indicates an expected call of IsFeatureEnabled.
func (mr *MockAPIMockRecorder) IsFeatureEnabled(featureName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFeatureEnabled", reflect.TypeOf((*MockAPI)(nil).IsFeatureEnabled), featureName)
}

// ScheduleResultsProcessing mocks base method.
func (m *MockAPI) ScheduleResultsProcessing(sha string, browser shared.ProductSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleResultsProcessing", sha, browser)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScheduleResultsProcessing indicates an expected call of ScheduleResultsProcessing.
func (mr *MockAPIMockRecorder) ScheduleResultsProcessing(sha, browser any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleResultsProcessing", reflect.TypeOf((*MockAPI)(nil).ScheduleResultsProcessing), sha, browser)
}

// ScheduleTask mocks base method.
func (m *MockAPI) ScheduleTask(queueName, taskName, target string, params url.Values) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleTask", queueName, taskName, target, params)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleTask indicates an expected call of ScheduleTask.
func (mr *MockAPIMockRecorder) ScheduleTask(queueName, taskName, target, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleTask", reflect.TypeOf((*MockAPI)(nil).ScheduleTask), queueName, taskName, target, params)
}
