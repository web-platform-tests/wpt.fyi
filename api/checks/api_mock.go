// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/web-platform-tests/wpt.fyi/api/checks (interfaces: SuitesAPI)

// Package checks is a generated GoMock package.
package checks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	shared "github.com/web-platform-tests/wpt.fyi/shared"
)

// MockSuitesAPI is a mock of SuitesAPI interface
type MockSuitesAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSuitesAPIMockRecorder
}

// MockSuitesAPIMockRecorder is the mock recorder for MockSuitesAPI
type MockSuitesAPIMockRecorder struct {
	mock *MockSuitesAPI
}

// NewMockSuitesAPI creates a new mock instance
func NewMockSuitesAPI(ctrl *gomock.Controller) *MockSuitesAPI {
	mock := &MockSuitesAPI{ctrl: ctrl}
	mock.recorder = &MockSuitesAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSuitesAPI) EXPECT() *MockSuitesAPIMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockSuitesAPI) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockSuitesAPIMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSuitesAPI)(nil).Context))
}

// GetSuitesForSHA mocks base method
func (m *MockSuitesAPI) GetSuitesForSHA(arg0 string) ([]shared.CheckSuite, error) {
	ret := m.ctrl.Call(m, "GetSuitesForSHA", arg0)
	ret0, _ := ret[0].([]shared.CheckSuite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuitesForSHA indicates an expected call of GetSuitesForSHA
func (mr *MockSuitesAPIMockRecorder) GetSuitesForSHA(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuitesForSHA", reflect.TypeOf((*MockSuitesAPI)(nil).GetSuitesForSHA), arg0)
}

// PendingCheckRun mocks base method
func (m *MockSuitesAPI) PendingCheckRun(arg0 shared.CheckSuite, arg1 shared.ProductSpec) (bool, error) {
	ret := m.ctrl.Call(m, "PendingCheckRun", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingCheckRun indicates an expected call of PendingCheckRun
func (mr *MockSuitesAPIMockRecorder) PendingCheckRun(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingCheckRun", reflect.TypeOf((*MockSuitesAPI)(nil).PendingCheckRun), arg0, arg1)
}

// ScheduleResultsProcessing mocks base method
func (m *MockSuitesAPI) ScheduleResultsProcessing(arg0 string, arg1 shared.ProductSpec) error {
	ret := m.ctrl.Call(m, "ScheduleResultsProcessing", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScheduleResultsProcessing indicates an expected call of ScheduleResultsProcessing
func (mr *MockSuitesAPIMockRecorder) ScheduleResultsProcessing(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleResultsProcessing", reflect.TypeOf((*MockSuitesAPI)(nil).ScheduleResultsProcessing), arg0, arg1)
}
